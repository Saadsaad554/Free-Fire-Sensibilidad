name: Build Android APK

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Create and Extract Project Files
      run: |
        # This step creates a temporary README with all project files embedded
        # and then extracts them into the correct folder structure.
        # No manual copy-pasting is needed from your side.
        cat << 'JSON_EOF' | sed -n '/^```json$/,/^```$/{/^```json$/d;/^```$/d;p;}' | jq -r '.files | to_entries[] | "mkdir -p \"$(dirname \"./\(.key)\")\" && echo \"\(.value)\" > \"./\(.key)\"' | bash -x
        ```json
        {
          "comment": "This JSON contains all project files. The GitHub Actions workflow will automatically extract them.",
          "files": {
            ".env": "",
            ".github/workflows/build-android.yml": "name: Build Android APK\n\non:\n  push:\n    branches: [ \"main\" ]\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: '20'\n\n    - name: Set up Java\n      uses: actions/setup-java@v4\n      with:\n        distribution: 'zulu'\n        java-version: '17'\n\n    - name: Install jq\n      run: sudo apt-get update && sudo apt-get install -y jq\n\n    - name: Extract Files from README\n      run: |\n        if [ ! -f README.md ]; then\n          echo \"README.md not found!\"\n          exit 1\n        fi\n        # Extract the JSON content between ```json and ```\n        # Use sed to remove the start/end markers, then pipe to jq\n        # The jq command iterates over each file entry, creates the directory, and writes the content\n        sed -n '/^```json$/,/^```$/{/^```json$/d;/^```$/d;p;}' README.md | jq -r '.files | to_entries[] | \"mkdir -p \\\"$(dirname \\\"./\\(.key)\\\")\\\" && echo \\\"\\(.value)\\\" > \\\"./\\(.key)\\\"' | bash -x\n        echo \"File extraction complete. Verifying file structure...\"\n        ls -laR\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Setup Android project\n      run: npm run android:setup\n\n    - name: Build APK\n      run: |\n        cd android\n        ./gradlew assembleDebug\n\n    - name: Upload APK artifact\n      uses: actions/upload-artifact@v4\n      with:\n        name: app-debug-apk\n        path: android/app/build/outputs/apk/debug/app-debug.apk\n",
            "apphosting.yaml": "# Settings to manage and configure a Firebase App Hosting backend.\n# https://firebase.google.com/docs/app-hosting/configure\n\nrunConfig:\n  # Increase this value if you'd like to automatically spin up\n  # more instances in response to increased traffic.\n  maxInstances: 1\n",
            "capacitor.config.ts": "import type { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'com.freefire.sensibilidad',\n  appName: 'FREE FIRE SENSIBILIDAD',\n  webDir: 'out',\n  server: {\n    androidScheme: 'https'\n  }\n};\n\nexport default config;\n",
            "components.json": "{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"src/app/globals.css\",\n    \"baseColor\": \"neutral\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  },\n  \"iconLibrary\": \"lucide\"\n}\n",
            "next.config.ts": "import type {NextConfig} from 'next';\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  output: 'export',\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  images: {\n    unoptimized: true,\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'placehold.co',\n        port: '',\n        pathname: '/**',\n      },\n    ],\n  },\n};\n\nexport default nextConfig;\n",
            "package.json": "{\n  \"name\": \"nextn\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev --turbopack -p 9002\",\n    \"genkit:dev\": \"genkit start -- tsx src/ai/dev.ts\",\n    \"genkit:watch\": \"genkit start -- tsx --watch src/ai/dev.ts\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"android:setup\": \"npm i && next build && npx cap add android\",\n    \"android:sync\": \"next build && npx cap sync android\",\n    \"android:open\": \"npx cap open android\"\n  },\n  \"dependencies\": {\n    \"@capacitor/android\": \"^6.1.1\",\n    \"@capacitor/core\": \"^6.1.1\",\n    \"@genkit-ai/googleai\": \"^1.14.1\",\n    \"@genkit-ai/next\": \"^1.14.1\",\n    \"@hookform/resolvers\": \"^4.1.3\",\n    \"@radix-ui/react-accordion\": \"^1.2.3\",\n    \"@radix-ui/react-alert-dialog\": \"^1.1.6\",\n    \"@radix-ui/react-avatar\": \"^1.1.3\",\n    \"@radix-ui/react-checkbox\": \"^1.1.4\",\n    \"@radix-ui/react-collapsible\": \"^1.1.11\",\n    \"@radix-ui/react-dialog\": \"^1.1.6\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.1.6\",\n    \"@radix-ui/react-label\": \"^2.1.2\",\n    \"@radix-ui/react-menubar\": \"^1.1.6\",\n    \"@radix-ui/react-popover\": \"^1.1.6\",\n    \"@radix-ui/react-progress\": \"^1.1.2\",\n    \"@radix-ui/react-radio-group\": \"^1.2.3\",\n    \"@radix-ui/react-scroll-area\": \"^1.2.3\",\n    \"@radix-ui/react-select\": \"^2.1.6\",\n    \"@radix-ui/react-separator\": \"^1.1.2\",\n    \"@radix-ui/react-slider\": \"^1.2.3\",\n    \"@radix-ui/react-slot\": \"^1.2.3\",\n    \"@radix-ui/react-switch\": \"^1.1.3\",\n    \"@radix-ui/react-tabs\": \"^1.1.3\",\n    \"@radix-ui/react-toast\": \"^1.2.6\",\n    \"@radix-ui/react-tooltip\": \"^1.1.8\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"cmdk\": \"^1.0.0\",\n    \"date-fns\": \"^3.6.0\",\n    \"dotenv\": \"^16.5.0\",\n    \"embla-carousel-react\": \"^8.6.0\",\n    \"firebase\": \"^11.9.1\",\n    \"genkit\": \"^1.14.1\",\n    \"lucide-react\": \"^0.475.0\",\n    \"next\": \"15.3.3\",\n    \"next-themes\": \"^0.3.0\",\n    \"patch-package\": \"^8.0.0\",\n    \"react\": \"^18.3.1\",\n    \"react-day-picker\": \"^8.10.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-hook-form\": \"^7.54.2\",\n    \"recharts\": \"^2.15.1\",\n    \"tailwind-merge\": \"^3.0.1\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"uuid\": \"^9.0.1\",\n    \"zod\": \"^3.24.2\"\n  },\n  \"devDependencies\": {\n    \"@capacitor/cli\": \"^6.1.1\",\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"@types/uuid\": \"^9.0.8\",\n    \"genkit-cli\": \"^1.14.1\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"typescript\": \"^5\"\n  }\n}\n",
            "src/ai/dev.ts": "import { config } from 'dotenv';\nconfig();\n\nimport '@/ai/flows/sensitivity-recommendation.ts';\n",
            "src/ai/flows/sensitivity-recommendation.ts": "// This is an autogenerated file from Firebase Genkit.\n'use server';\n/**\n * @fileOverview A flow for providing personalized sensitivity recommendations for Free Fire.\n *\n * - getSensitivityRecommendation - A function that handles the sensitivity recommendation process.\n * - SensitivityRecommendationInput - The input type for the getSensitivityRecommendation function.\n * - SensitivityRecommendationOutput - The return type for the getSensitivityRecommendation function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SensitivityRecommendationInputSchema = z.object({\n  phoneModel: z.string().describe('The phone model being used.'),\n  dpi: z.number().describe('The DPI (dots per inch) setting of the phone.'),\n  inGameSensitivity: z.object({\n    general: z.number().describe('The general sensitivity setting in the game (0-200).'),\n    redDot: z.number().describe('The red dot sensitivity setting in the game (0-200).'),\n    twoXSight: z.number().describe('The 2x sight sensitivity setting in the game (0-200).'),\n    fourXSight: z.number().describe('The 4x sight sensitivity setting in the game (0-200).'),\n    awm: z.number().describe('The AWM scope sensitivity setting in the game (0-200).'),\n    freeLook: z.number().describe('The free look sensitivity setting in the game (0-200).'),\n  }).describe('The in-game sensitivity settings.'),\n});\nexport type SensitivityRecommendationInput = z.infer<typeof SensitivityRecommendationInputSchema>;\n\nconst SensitivityRecommendationOutputSchema = z.object({\n  recommendations: z.object({\n    general: z.number().describe('The recommended general sensitivity setting.'),\n    redDot: z.number().describe('The recommended red dot sensitivity setting.'),\n    twoXSight: z.number().describe('The recommended 2x sight sensitivity setting.'),\n    fourXSight: z.number().describe('The recommended 4x sight sensitivity setting.'),\n    awm: z.number().describe('The recommended AWM scope sensitivity setting.'),\n    freeLook: z.number().describe('The recommended free look sensitivity setting.'),\n  }).describe('The personalized sensitivity recommendations.'),\n  recommendedDpi: z.object({\n    value: z.union([z.number(), z.null()]).describe('The recommended DPI value, or null if not applicable.'),\n    note: z.string().describe('An explanation about the DPI recommendation. If DPI is not applicable for the phone (e.g., iPhones), explain why.'),\n  }).describe('The recommended DPI setting and an explanatory note.'),\n  reasoning: z.string().describe('The reasoning behind the recommendations.'),\n});\nexport type SensitivityRecommendationOutput = z.infer<typeof SensitivityRecommendationOutputSchema>;\n\nexport async function getSensitivityRecommendation(input: SensitivityRecommendationInput): Promise<SensitivityRecommendationOutput> {\n  return sensitivityRecommendationFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'sensitivityRecommendationPrompt',\n  input: {schema: SensitivityRecommendationInputSchema},\n  output: {schema: SensitivityRecommendationOutputSchema},\n  prompt: `You are an expert Free Fire game booster. Analyze the provided game settings and provide personalized sensitivity and DPI recommendations to improve headshot accuracy. \nIMPORTANT: The maximum sensitivity for all settings is 200. Your recommendations must be within the 0-200 range. Pro players often use very high sensitivities, so do not be afraid to recommend values like 180, 195, or even 200 if it is optimal for the user's device.\n\nPhone Model: {{{phoneModel}}}\nCurrent DPI: {{{dpi}}}\nCurrent In-Game Sensitivity Settings:\nGeneral: {{{inGameSensitivity.general}}}\nRed Dot: {{{inGameSensitivity.redDot}}}\n2x Sight: {{{inGameSensitivity.twoXSight}}}\n4x Sight: {{{inGameSensitivity.fourXSight}}}\nAWM Scope: {{{inGameSensitivity.awm}}}\nFree Look: {{{inGameSensitivity.freeLook}}}\n\nBased on the phone model and current settings, provide the optimal sensitivity settings (between 0 and 200) and a recommended DPI value.\n\n- For Android phones, provide a specific DPI value that is known to work well for that model for Free Fire.\n- For Apple iPhones, DPI is not user-configurable. In this case, set the recommended DPI value to null and provide a note explaining that iPhones do not have a DPI setting and that the in-game sensitivity is the primary way to adjust aiming.\n\nProvide the recommendations in JSON format and include a reasoning for each recommendation.`, \n});\n\nconst sensitivityRecommendationFlow = ai.defineFlow(\n  {\n    name: 'sensitivityRecommendationFlow',\n    inputSchema: SensitivityRecommendationInputSchema,\n    outputSchema: SensitivityRecommendationOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n",
            "src/ai/genkit.ts": "import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n",
            "src/app/(main)/booster/components/recommendation-display.tsx": "\n'use client';\n\nimport { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { useProfiles } from '@/hooks/use-profiles';\nimport { SENSITIVITY_FIELDS } from '@/lib/constants';\nimport type { SensitivityRecommendationInput, SensitivityRecommendationOutput } from '@/ai/flows/sensitivity-recommendation';\nimport { Info } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { AdDialog } from '@/components/ad-dialog';\nimport AdRenderer from '@/components/ad-renderer';\n\ninterface RecommendationDisplayProps {\n  recommendation: SensitivityRecommendationOutput;\n  input: SensitivityRecommendationInput;\n}\n\nconst getSensitivityLabel = (key: string) => {\n    switch (key) {\n        case 'general':\n            return 'General';\n        case 'redDot':\n            return 'Red Dot';\n        case 'twoXSight':\n            return '2x Scope';\n        case 'fourXSight':\n            return '4x Scope';\n        case 'awm':\n            return 'AWM';\n        case 'freeLook':\n            return 'Free Look';\n        default:\n            return key.replace(/([A-Z])/g, ' $1');\n    }\n}\n\nconst SAVE_PROFILE_AD_CODE = `\n<script type=\"text/javascript\">\n\tatOptions = {\n\t\t'key' : '28af91f7f6fdde419358c862dd2e58d5',\n\t\t'format' : 'iframe',\n\t\t'height' : 250,\n\t\t'width' : 300,\n\t\t'params' : {}\n\t};\n</script>\n<script type=\"text/javascript\" src=\"//establishscarcely.com/28af91f7f6fdde419358c862dd2e58d5/invoke.js\"></script>\n`;\n\nexport default function RecommendationDisplay({ recommendation, input }: RecommendationDisplayProps) {\n  const [isSaveDialogOpen, setSaveDialogOpen] = useState(false);\n  const [isAdDialogOpen, setAdDialogOpen] = useState(false);\n  const [profileName, setProfileName] = useState('');\n  const [profileDescription, setProfileDescription] = useState('');\n  const { saveProfile } = useProfiles();\n\n  const handleSaveAction = () => {\n    saveProfile({\n      name: profileName,\n      description: profileDescription,\n      input,\n      recommendation,\n    });\n    setAdDialogOpen(false);\n    setProfileName('');\n    setProfileDescription('');\n  };\n  \n  const handleOpenSaveDialog = () => {\n      setSaveDialogOpen(true);\n  }\n  \n  const triggerAd = () => {\n    if (!profileName) {\n      alert('Please enter a profile name.');\n      return;\n    }\n    setSaveDialogOpen(false);\n    setAdDialogOpen(true);\n  }\n\n  const recommendedDpi = recommendation.recommendedDpi;\n\n  return (\n    <>\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl text-accent\">Your Optimized Settings</CardTitle>\n        <CardDescription>\n          Based on your input, here are our AI-powered recommendations for peak performance.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n         {recommendedDpi && (\n          <div className=\"p-4 border rounded-lg bg-card-foreground/5\">\n            <h3 className=\"text-lg font-semibold mb-2\">Recommended DPI</h3>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-3xl font-bold text-accent\">\n                {recommendedDpi.value !== null ? recommendedDpi.value : 'N/A'}\n              </div>\n              <div className=\"flex-1 text-sm text-muted-foreground flex items-start gap-2\">\n                 <Info className=\"h-4 w-4 mt-0.5 shrink-0\" />\n                <span>{recommendedDpi.note}</span>\n              </div>\n            </div>\n          </div>\n        )}\n        <div>\n          <h3 className=\"text-lg font-semibold mb-2\">Sensitivity Comparison</h3>\n          <div className=\"overflow-x-auto\">\n            <Table className=\"text-xs sm:text-sm\">\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"w-[80px] sm:w-[120px] p-2\">Setting</TableHead>\n                  <TableHead className=\"text-center p-2\">Input</TableHead>\n                  <TableHead className=\"text-center text-accent p-2\">Recommend</TableHead>\n                  <TableHead className=\"text-center p-2\">Change</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                <TableRow>\n                    <TableCell className=\"font-medium p-2\">DPI</TableCell>\n                    <TableCell className=\"text-center p-2 text-primary\">{input.dpi}</TableCell>\n                    <TableCell className=\"text-center font-bold text-accent p-2\">\n                        {recommendedDpi.value !== null ? recommendedDpi.value : 'N/A'}\n                    </TableCell>\n                    <TableCell className={`text-center font-mono p-2 ${recommendedDpi.value !== null && recommendedDpi.value - input.dpi > 0 ? 'text-green-400' : recommendedDpi.value !== null && recommendedDpi.value - input.dpi < 0 ? 'text-red-400' : 'text-muted-foreground'}`}>\n                        {recommendedDpi.value !== null ? (recommendedDpi.value - input.dpi > 0 ? `+${recommendedDpi.value - input.dpi}` : recommendedDpi.value - input.dpi) : '-'}\n                    </TableCell>\n                </TableRow>\n                {SENSITIVITY_FIELDS.map((key) => {\n                  const original = input.inGameSensitivity[key as keyof typeof input.inGameSensitivity];\n                  const recommendedVal = recommendation.recommendations[key as keyof typeof recommendation.recommendations];\n                  const diff = recommendedVal - original;\n                  const diffColor = diff > 0 ? 'text-green-400' : diff < 0 ? 'text-red-400' : 'text-muted-foreground';\n\n                  return (\n                    <TableRow key={key}>\n                      <TableCell className=\"font-medium capitalize p-2\">{getSensitivityLabel(key)}</TableCell>\n                      <TableCell className=\"text-center p-2 text-primary\">{original}</TableCell>\n                      <TableCell className=\"text-center font-bold text-accent p-2\">{recommendedVal}</TableCell>\n                      <TableCell className={`text-center font-mono p-2 ${diffColor}`}>\n                        {diff > 0 ? `+${diff}` : diff}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n\n        <div>\n          <Accordion type=\"single\" collapsible>\n            <AccordionItem value=\"reasoning\">\n              <AccordionTrigger className=\"text-lg font-semibold\">AI Reasoning</AccordionTrigger>\n              <AccordionContent className=\"text-muted-foreground prose prose-invert\">\n                <p>{recommendation.reasoning}</p>\n              </AccordionContent>\n            </AccordionItem>\n          </Accordion>\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Dialog open={isSaveDialogOpen} onOpenChange={setSaveDialogOpen}>\n           <Button onClick={handleOpenSaveDialog} className=\"animate-pulse-ring\">Save Profile</Button>\n          <DialogContent className=\"sm:max-w-[425px]\">\n            <DialogHeader>\n              <DialogTitle>Save Profile</DialogTitle>\n              <DialogDescription>\n                Give your new sensitivity profile a name and description for future reference.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"name\" className=\"text-right\">Name</Label>\n                <Input\n                  id=\"name\"\n                  value={profileName}\n                  onChange={(e) => setProfileName(e.target.value)}\n                  className=\"col-span-3\"\n                  placeholder=\"e.g., Aggressive Rusher\"\n                />\n              </div>\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"description\" className=\"text-right\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={profileDescription}\n                  onChange={(e) => setProfileDescription(e.target.value)}\n                  className=\"col-span-3\"\n                  placeholder=\"Notes about this setup (e.g., 'Good for SMGs')\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button onClick={triggerAd} disabled={!profileName} className={cn(!!profileName && 'animate-pulse-ring')}>Save Profile</Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </CardFooter>\n    </Card>\n     <AdDialog \n        open={isAdDialogOpen} \n        onOpenChange={setAdDialogOpen}\n        onAdClosed={handleSaveAction}\n        title=\"Confirm Save\"\n        description=\"Please view this ad to save your profile permanently.\"\n    >\n        <AdRenderer htmlContent={SAVE_PROFILE_AD_CODE} />\n    </AdDialog>\n    </>\n  );\n}\n",
            "src/app/(main)/booster/components/sensitivity-form.tsx": "\n'use client';\n\nimport { useState, useEffect, useActionState, useRef, useTransition } from 'react';\nimport { useFormStatus } from 'react-dom';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm, FormProvider, useFormContext } from 'react-hook-form';\nimport { z } from 'zod';\nimport { getRecommendationAction } from '@/lib/actions';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command';\nimport { Slider } from '@/components/ui/slider';\nimport { PHONE_BRANDS, PHONE_MODELS, SENSITIVITY_FIELDS } from '@/lib/constants';\nimport RecommendationDisplay from './recommendation-display';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Terminal, Check, ChevronsUpDown } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { AdDialog } from '@/components/ad-dialog';\nimport AdRenderer from '@/components/ad-renderer';\n\nconst formSchema = z.object({\n  phoneBrand: z.string({ required_error: 'Please select a phone brand.'}).min(1, 'Please select a phone brand.'),\n  phoneModel: z.string({ required_error: 'Please select a phone model.'}).min(1, 'Please select a phone model.'),\n  dpi: z.number().min(100).max(1200),\n  inGameSensitivity: z.object({\n    general: z.number().min(0).max(200),\n    redDot: z.number().min(0).max(200),\n    twoXSight: z.number().min(0).max(200),\n    fourXSight: z.number().min(0).max(200),\n    awm: z.number().min(0).max(200),\n    freeLook: z.number().min(0).max(200),\n  }),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nconst initialFormData: FormData = {\n  phoneBrand: '',\n  phoneModel: '',\n  dpi: 520,\n  inGameSensitivity: {\n    general: 190,\n    redDot: 195,\n    twoXSight: 185,\n    fourXSight: 180,\n    awm: 60,\n    freeLook: 170,\n  },\n};\n\nconst SensitivitySlider = ({ control, name, label }: { control: any; name: any; label: string }) => (\n  <FormField\n    control={control}\n    name={name}\n    render={({ field }) => (\n      <FormItem>\n        <div className=\"flex justify-between items-center\">\n          <FormLabel className=\"capitalize\">{label}</FormLabel>\n          <span className=\"text-sm font-medium\">{field.value}</span>\n        </div>\n        <FormControl>\n          <Slider\n            min={0}\n            max={200}\n            step={1}\n            value={[field.value]}\n            onValueChange={(values) => field.onChange(values[0])}\n          />\n        </FormControl>\n        <FormMessage />\n      </FormItem>\n    )}\n  />\n);\n\nfunction SubmitButton() {\n  const { pending } = useFormStatus();\n  const form = useFormContext();\n\n  return (\n    <Button \n      type=\"submit\" \n      disabled={pending} \n      className={cn(\n        \"w-full\", \n        { \"animate-pulse-ring\": form.formState.isValid && !pending }\n      )}\n    >\n      {pending ? 'Hacking...' : 'Get AI hack'}\n    </Button>\n  );\n}\n\nconst getSensitivityLabel = (key: string) => {\n    switch (key) {\n        case 'twoXSight':\n            return 'Scope ×2';\n        case 'fourXSight':\n            return 'Scope ×4';\n        default:\n            return key.replace(/([A-Z])/g, ' $1');\n    }\n}\n\nconst GET_AI_HACK_AD_CODE = `\n<script async=\\\"async\\\" data-cfasync=\\\"false\\\" src=\\\"//establishscarcely.com/4e86c66bd617dde907cb05c23671c0c9/invoke.js\\\"></script>\n<div id=\\\"container-4e86c66bd617dde907cb05c23671c0c9\\\"></div>\n`;\n\nexport default function SensitivityForm() {\n  const [isPending, startTransition] = useTransition();\n  const [state, formAction] = useActionState(getRecommendationAction, { data: null, error: undefined });\n  const [currentModels, setCurrentModels] = useState<string[]>([]);\n  const [brandPopoverOpen, setBrandPopoverOpen] = useState(false);\n  const [modelPopoverOpen, setModelPopoverOpen] = useState(false);\n  const [isAdDialogOpen, setAdDialogOpen] = useState(false);\n  const formRef = useRef<HTMLFormElement>(null);\n  \n  const brandList = Object.entries(PHONE_BRANDS).map(([key, name]) => ({ value: key, label: name }));\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: initialFormData,\n    mode: 'onBlur',\n  });\n  \n  const watchedBrand = form.watch('phoneBrand');\n  \n  useEffect(() => {\n    if (watchedBrand) {\n      setCurrentModels(PHONE_MODELS[watchedBrand as keyof typeof PHONE_MODELS] || []);\n      form.setValue('phoneModel', '', { shouldValidate: true });\n    } else {\n      setCurrentModels([]);\n    }\n  }, [watchedBrand, form]);\n  \n  const handleAdClosed = () => {\n    setAdDialogOpen(false);\n    if (formRef.current) {\n        const formData = new FormData(formRef.current);\n        startTransition(() => formAction(formData));\n    }\n  };\n  \n  const handleFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      form.trigger().then(isValid => {\n          if (isValid) {\n              setAdDialogOpen(true);\n          }\n      });\n  }\n\n  const inputForRecommendation = {\n    phoneModel: `${PHONE_BRANDS[form.getValues('phoneBrand') as keyof typeof PHONE_BRANDS] || ''} ${form.getValues('phoneModel') || ''}`,\n    dpi: form.getValues('dpi'),\n    inGameSensitivity: form.getValues('inGameSensitivity'),\n  }\n\n  return (\n    <>\n      <FormProvider {...form}>\n        <Form {...form}>\n          <form ref={formRef} onSubmit={handleFormSubmit} noValidate>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              <div className=\"md:col-span-1 space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"font-headline\">Device Settings</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"phoneBrand\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-col\">\n                          <FormLabel>Phone Brand</FormLabel>\n                          <Popover open={brandPopoverOpen} onOpenChange={setBrandPopoverOpen}>\n                            <PopoverTrigger asChild>\n                              <FormControl>\n                                <Button\n                                  variant=\"outline\"\n                                  role=\"combobox\"\n                                  className={cn(\n                                    \"w-full justify-between\",\n                                    !field.value && \"text-muted-foreground\",\n                                  )}\n                                >\n                                  {field.value\n                                    ? brandList.find(\n                                        (brand) => brand.value === field.value\n                                      )?.label\n                                    : \"Select brand\"}\n                                  <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                                </Button>\n                              </FormControl>\n                            </PopoverTrigger>\n                            <PopoverContent className=\"w-[--radix-popover-trigger-width] p-0\">\n                              <Command>\n                                <CommandInput placeholder=\"Search brand...\" />\n                                <CommandList>\n                                  <CommandEmpty>No brand found.</CommandEmpty>\n                                  <CommandGroup>\n                                    {brandList.map((brand) => (\n                                      <CommandItem\n                                        value={brand.label}\n                                        key={brand.value}\n                                        onSelect={() => {\n                                          form.setValue(\"phoneBrand\", brand.value, { shouldValidate: true })\n                                          setBrandPopoverOpen(false)\n                                        }}\n                                      >\n                                        <Check\n                                          className={cn(\n                                            \"mr-2 h-4 w-4\",\n                                            brand.value === field.value\n                                              ? \"opacity-100\"\n                                              : \"opacity-0\"\n                                          )}\n                                        />\n                                        {brand.label}\n                                      </CommandItem>\n                                    ))}\n                                  </CommandGroup>\n                                </CommandList>\n                              </Command>\n                            </PopoverContent>\n                          </Popover>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"phoneModel\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-col\">\n                          <FormLabel>Phone Model</FormLabel>\n                          <Popover open={modelPopoverOpen} onOpenChange={setModelPopoverOpen}>\n                            <PopoverTrigger asChild>\n                              <FormControl>\n                                <Button\n                                  variant=\"outline\"\n                                  role=\"combobox\"\n                                  disabled={!watchedBrand}\n                                  className={cn(\n                                    \"w-full justify-between\",\n                                    !field.value && \"text-muted-foreground\"\n                                  )}\n                                >\n                                  {field.value || \"Select model\"}\n                                  <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                                </Button>\n                              </FormControl>\n                            </PopoverTrigger>\n                            <PopoverContent className=\"w-[--radix-popover-trigger-width] p-0\">\n                              <Command>\n                                <CommandInput placeholder=\"Search model...\" />\n                                <CommandList>\n                                  <CommandEmpty>No model found.</CommandEmpty>\n                                  <CommandGroup>\n                                    {currentModels.map((model) => (\n                                      <CommandItem\n                                        value={model}\n                                        key={model}\n                                        onSelect={() => {\n                                          form.setValue(\"phoneModel\", model, { shouldValidate: true })\n                                          setModelPopoverOpen(false)\n                                        }}\n                                      >\n                                        <Check\n                                          className={cn(\n                                            \"mr-2 h-4 w-4\",\n                                            model === field.value\n                                              ? \"opacity-100\"\n                                              : \"opacity-0\"\n                                          )}\n                                        />\n                                        {model}\n                                      </CommandItem>\n                                    ))}\n                                  </CommandGroup>\n                                </CommandList>\n                              </Command>\n                            </PopoverContent>\n                          </Popover>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                        control={form.control}\n                        name=\"dpi\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <div className=\"flex justify-between items-center\">\n                                <FormLabel>DPI</FormLabel>\n                                <span className=\"text-sm font-medium\">{field.value}</span>\n                            </div>\n                            <FormControl>\n                              <Slider\n                                    min={100}\n                                    max={1200}\n                                    step={1}\n                                    value={[field.value]}\n                                    onValueChange={(values) => field.onChange(values[0])}\n                                />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                  </CardContent>\n                </Card>\n              </div>\n              <div className=\"md:col-span-2\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"font-headline\">In-Game Sensitivity</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-x-8 gap-y-4\">\n                      {SENSITIVITY_FIELDS.map((fieldName) => (\n                        <SensitivitySlider\n                          key={fieldName}\n                          control={form.control}\n                          name={`inGameSensitivity.${fieldName}`}\n                          label={getSensitivityLabel(fieldName)}\n                        />\n                      ))}\n                    </div>\n                  </CardContent>\n                  <CardFooter>\n                     <SubmitButton />\n                  </CardFooter>\n                </Card>\n              </div>\n            </div>\n             {/* Hidden inputs to pass all form data */}\n            <input type=\"hidden\" {...form.register('phoneBrand')} />\n            <input type=\"hidden\" {...form.register('phoneModel')} />\n            <input type=\"hidden\" {...form.register('dpi')} />\n            {SENSITIVITY_FIELDS.map(fieldName => (\n                <input\n                    key={fieldName}\n                    type=\"hidden\"\n                    {...form.register(`inGameSensitivity.${fieldName}`)}\n                />\n            ))}\n          </form>\n        </Form>\n      </FormProvider>\n\n       <AdDialog \n            open={isAdDialogOpen} \n            onOpenChange={setAdDialogOpen}\n            onAdClosed={handleAdClosed} \n            title=\"Unlock Recommendation\"\n            description=\"Please view this ad to unlock your AI sensitivity recommendation.\"\n        >\n          <AdRenderer htmlContent={GET_AI_HACK_AD_CODE} />\n        </AdDialog>\n\n       {state.error && (\n         <Alert variant=\"destructive\" className=\"mt-8\">\n            <Terminal className=\"h-4 w-4\" />\n            <AlertTitle>Error</AlertTitle>\n            <AlertDescription>\n                {state.error}\n            </AlertDescription>\n        </Alert>\n      )}\n\n      {state.data && (\n        <div className=\"mt-8\">\n          <RecommendationDisplay \n            recommendation={state.data}\n            input={inputForRecommendation}\n          />\n        </div>\n      )}\n    </>\n  );\n}\n",
            "src/app/(main)/booster/page.tsx": "import AdPlaceholder from '@/components/ad-placeholder';\nimport SensitivityForm from './components/sensitivity-form';\n\nexport default function BoosterPage() {\n  return (\n    <>\n      <div className=\"space-y-2 mb-8\">\n        <h1 className=\"text-3xl font-bold font-headline tracking-tight\">Sensitivity Booster</h1>\n        <p className=\"text-muted-foreground\">\n          Enter your current settings to get personalized sensitivity recommendations powered by AI.\n        </p>\n      </div>\n      <SensitivityForm />\n      <div className=\"mt-12\">\n          <h2 className=\"text-center text-lg font-semibold font-headline tracking-tight mb-4\">Sponsored Content</h2>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-6\">\n            <AdPlaceholder />\n            <AdPlaceholder />\n            <AdPlaceholder />\n            <AdPlaceholder />\n            <AdPlaceholder />\n        </div>\n      </div>\n    </>\n  );\n}\n",
            "src/app/(main)/layout.tsx": "import * as React from 'react';\nimport PageShell from '@/components/page-shell';\n\nexport default function MainLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <PageShell>\n        {children}\n    </PageShell>\n  );\n}\n",
            "src/app/(main)/optimizer/components/recommendation-display.tsx": "'use client';\n\nimport { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { useProfiles } from '@/hooks/use-profiles';\nimport { SENSITIVITY_FIELDS } from '@/lib/constants';\nimport type { SensitivityRecommendationInput, SensitivityRecommendationOutput } from '@/ai/flows/sensitivity-recommendation';\n\ninterface RecommendationDisplayProps {\n  recommendation: SensitivityRecommendationOutput;\n  input: SensitivityRecommendationInput;\n}\n\nconst getSensitivityLabel = (key: string) => {\n    switch (key) {\n        case 'twoXSight':\n            return 'Scope ×2';\n        case 'fourXSight':\n            return 'Scope ×4';\n        default:\n            return key.replace(/([A-Z])/g, ' $1');\n    }\n}\n\nexport default function RecommendationDisplay({ recommendation, input }: RecommendationDisplayProps) {\n  const [isSaveDialogOpen, setSaveDialogOpen] = useState(false);\n  const [profileName, setProfileName] = useState('');\n  const [profileDescription, setProfileDescription] = useState('');\n  const { saveProfile } = useProfiles();\n\n  const handleSaveProfile = () => {\n    if (!profileName) {\n      alert('Please enter a profile name.');\n      return;\n    }\n    saveProfile({\n      name: profileName,\n      description: profileDescription,\n      input,\n      recommendation,\n    });\n    setSaveDialogOpen(false);\n    setProfileName('');\n    setProfileDescription('');\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"font-headline text-2xl text-primary\">Your Optimized Settings</CardTitle>\n        <CardDescription>\n          Based on your input, here are our AI-powered recommendations for peak performance.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div>\n          <h3 className=\"text-lg font-semibold mb-2\">Sensitivity Comparison</h3>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"w-[150px]\">Setting</TableHead>\n                  <TableHead className=\"text-center\">Your Input</TableHead>\n                  <TableHead className=\"text-center text-primary\">Recommendation</TableHead>\n                  <TableHead className=\"text-center\">Change</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {SENSITIVITY_FIELDS.map((key) => {\n                  const original = input.inGameSensitivity[key];\n                  const recommendedVal = recommendation.recommendations[key];\n                  const diff = recommendedVal - original;\n                  const diffColor = diff > 0 ? 'text-green-400' : diff < 0 ? 'text-red-400' : 'text-muted-foreground';\n\n                  return (\n                    <TableRow key={key}>\n                      <TableCell className=\"font-medium capitalize\">{getSensitivityLabel(key)}</TableCell>\n                      <TableCell className=\"text-center\">{original}</TableCell>\n                      <TableCell className=\"text-center font-bold text-primary\">{recommendedVal}</TableCell>\n                      <TableCell className={`text-center font-mono ${diffColor}`}>\n                        {diff > 0 ? `+${diff}` : diff}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n\n        <div>\n          <Accordion type=\"single\" collapsible>\n            <AccordionItem value=\"reasoning\">\n              <AccordionTrigger className=\"text-lg font-semibold\">AI Reasoning</AccordionTrigger>\n              <AccordionContent className=\"text-muted-foreground prose prose-invert\">\n                <p>{recommendation.reasoning}</p>\n              </AccordionContent>\n            </AccordionItem>\n          </Accordion>\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Dialog open={isSaveDialogOpen} onOpenChange={setSaveDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>Save Profile</Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[425px]\">\n            <DialogHeader>\n              <DialogTitle>Save Profile</DialogTitle>\n              <DialogDescription>\n                Give your new sensitivity profile a name and description for future reference.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"name\" className=\"text-right\">Name</Label>\n                <Input\n                  id=\"name\"\n                  value={profileName}\n                  onChange={(e) => setProfileName(e.target.value)}\n                  className=\"col-span-3\"\n                  placeholder=\"e.g., Aggressive Rusher\"\n                />\n              </div>\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"description\" className=\"text-right\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={profileDescription}\n                  onChange={(e) => setProfileDescription(e.target.value)}\n                  className=\"col-span-3\"\n                  placeholder=\"Notes about this setup (e.g., 'Good for SMGs')\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button onClick={handleSaveProfile}>Save Profile</Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </CardFooter>\n    </Card>\n  );\n}\n",
            "src/app/(main)/optimizer/components/sensitivity-form.tsx": "\n'use client';\n\nimport { useState, useEffect, useActionState } from 'react';\nimport { useFormStatus } from 'react-dom';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { getRecommendationAction } from '@/lib/actions';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { PHONE_BRANDS, PHONE_MODELS, SENSITIVITY_FIELDS } from '@/lib/constants';\nimport RecommendationDisplay from './recommendation-display';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Terminal } from 'lucide-react';\n\nconst formSchema = z.object({\n  phoneBrand: z.string().min(1, 'Please select a phone brand.'),\n  phoneModel: z.string().min(1, 'Please select a phone model.'),\n  dpi: z.number().min(100).max(1200),\n  inGameSensitivity: z.object({\n    general: z.number().min(0).max(100),\n    redDot: z.number().min(0).max(100),\n    twoXSight: z.number().min(0).max(100),\n    fourXSight: z.number().min(0).max(100),\n    awm: z.number().min(0).max(100),\n    freeLook: z.number().min(0).max(100),\n  }),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nconst initialFormData: FormData = {\n  phoneBrand: '',\n  phoneModel: '',\n  dpi: 400,\n  inGameSensitivity: {\n    general: 80,\n    redDot: 80,\n    twoXSight: 80,\n    fourXSight: 80,\n    awm: 50,\n    freeLook: 50,\n  },\n};\n\nconst SensitivitySlider = ({ control, name, label }: { control: any; name: any; label: string }) => (\n  <FormField\n    control={control}\n    name={name}\n    render={({ field }) => (\n      <FormItem>\n        <div className=\"flex justify-between items-center\">\n          <FormLabel className=\"capitalize\">{label}</FormLabel>\n          <span className=\"text-sm font-medium\">{field.value}</span>\n        </div>\n        <FormControl>\n          <Slider\n            min={0}\n            max={100}\n            step={1}\n            value={[field.value]}\n            onValueChange={(values) => field.onChange(values[0])}\n          />\n        </FormControl>\n        <FormMessage />\n      </FormItem>\n    )}\n  />\n);\n\nfunction SubmitButton() {\n  const { pending } = useFormStatus();\n  return (\n    <Button type=\"submit\" disabled={pending} className=\"w-full\">\n      {pending ? 'Optimizing...' : 'Get Recommendation'}\n    </Button>\n  );\n}\n\nconst getSensitivityLabel = (key: string) => {\n    switch (key) {\n        case 'twoXSight':\n            return 'Scope ×2';\n        case 'fourXSight':\n            return 'Scope ×4';\n        default:\n            return key.replace(/([A-Z])/g, ' $1');\n    }\n}\n\nexport default function SensitivityForm() {\n  const [state, formAction] = useActionState(getRecommendationAction, {});\n  const [selectedBrand, setSelectedBrand] = useState<keyof typeof PHONE_MODELS | ''>('');\n  const [currentModels, setCurrentModels] = useState<string[]>([]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: initialFormData,\n  });\n\n  useEffect(() => {\n    if (selectedBrand) {\n      setCurrentModels(PHONE_MODELS[selectedBrand] || []);\n      form.setValue('phoneModel', '');\n    } else {\n      setCurrentModels([]);\n    }\n  }, [selectedBrand, form]);\n\n  \n  const inputForRecommendation = {\n    phoneModel: `${PHONE_BRANDS[form.getValues('phoneBrand') as keyof typeof PHONE_BRANDS] || ''} ${form.getValues('phoneModel') || ''}`,\n    dpi: form.getValues('dpi'),\n    inGameSensitivity: form.getValues('inGameSensitivity'),\n  }\n\n  return (\n    <>\n      <Form {...form}>\n        <form action={formAction}>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"md:col-span-1 space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"font-headline\">Device Settings</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"phoneBrand\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Brand</FormLabel>\n                        <Select\n                          onValueChange={(value) => {\n                            field.onChange(value);\n                            setSelectedBrand(value as keyof typeof PHONE_MODELS);\n                          }}\n                          defaultValue={field.value}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select brand\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {Object.entries(PHONE_BRANDS).map(([key, name]) => (\n                              <SelectItem key={key} value={key}>{name}</SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"phoneModel\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Model</FormLabel>\n                         <input\n                            type=\"hidden\"\n                            {...field}\n                            value={`${PHONE_BRANDS[form.getValues('phoneBrand') as keyof typeof PHONE_BRANDS] || ''} ${field.value || ''}`}\n                            name=\"phoneModel\"\n                          />\n                        <Select \n                          onValueChange={field.onChange} \n                          value={field.value} \n                          disabled={!selectedBrand}\n                          name=\"phoneModel_display\"\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select model\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {currentModels.map((model) => (\n                              <SelectItem key={model} value={model}>{model}</SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                   <FormField\n                      control={form.control}\n                      name=\"dpi\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <div className=\"flex justify-between items-center\">\n                              <FormLabel>DPI</FormLabel>\n                              <span className=\"text-sm font-medium\">{field.value}</span>\n                          </div>\n                          <FormControl>\n                              <Slider\n                                  min={100}\n                                  max={1200}\n                                  step={1}\n                                  value={[field.value]}\n                                  onValueChange={(values) => field.onChange(values[0])}\n                              />\n                          </FormControl>\n                          <FormMessage />\n                           <input type=\"hidden\" {...field} />\n                        </FormItem>\n                      )}\n                    />\n                </CardContent>\n              </Card>\n            </div>\n            <div className=\"md:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"font-headline\">In-Game Sensitivity</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-x-8 gap-y-4\">\n                    {SENSITIVITY_FIELDS.map((fieldName) => (\n                      <SensitivitySlider\n                        key={fieldName}\n                        control={form.control}\n                        name={`inGameSensitivity.${fieldName}`}\n                        label={getSensitivityLabel(fieldName)}\n                      />\n                    ))}\n                     {SENSITIVITY_FIELDS.map((fieldName) => (\n                        <input\n                            key={fieldName}\n                            type=\"hidden\"\n                            {...form.register(`inGameSensitivity.${fieldName}`)}\n                            name={fieldName}\n                        />\n                    ))}\n                  </div>\n                </CardContent>\n                <CardFooter>\n                    <SubmitButton />\n                </CardFooter>\n              </Card>\n            </div>\n          </div>\n        </form>\n      </Form>\n       {state.error && (\n         <Alert variant=\"destructive\" className=\"mt-8\">\n            <Terminal className=\"h-4 w-4\" />\n            <AlertTitle>Error</AlertTitle>\n            <AlertDescription>\n                {state.error}\n            </AlertDescription>\n        </Alert>\n      )}\n\n      {state.data && (\n        <div className=\"mt-8\">\n          <RecommendationDisplay \n            recommendation={state.data}\n            input={inputForRecommendation}\n          />\n        </div>\n      )}\n    </>\n  );\n}\n\n    \n",
            "src/app/(main)/optimizer/page.tsx": "import SensitivityForm from './components/sensitivity-form';\n\nexport default function OptimizerPage() {\n  return (\n    <div className=\"container mx-auto max-w-4xl\">\n      <div className=\"space-y-2 mb-8\">\n        <h1 className=\"text-3xl font-bold font-headline tracking-tight\">Sensitivity Optimizer</h1>\n        <p className=\"text-muted-foreground\">\n          Enter your current settings to get personalized sensitivity recommendations powered by AI.\n        </p>\n      </div>\n      <SensitivityForm />\n    </div>\n  );\n}\n",
            "src/app/(main)/profiles/components/profile-manager.tsx": "\n'use client';\n\nimport { useState, Fragment } from 'react';\nimport { useProfiles } from '@/hooks/use-profiles';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { SENSITIVITY_FIELDS } from '@/lib/constants';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Trash2, GitCompareArrows } from 'lucide-react';\nimport type { Profile } from '@/lib/types';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\"\nimport Link from 'next/link';\nimport { cn } from '@/lib/utils';\nimport AdPlaceholder from '@/components/ad-placeholder';\nimport { AdDialog } from '@/components/ad-dialog';\nimport AdRenderer from '@/components/ad-renderer';\n\nconst getSensitivityLabel = (key: string) => {\n    switch (key) {\n        case 'twoXSight':\n            return 'Scope ×2';\n        case 'fourXSight':\n            return 'Scope ×4';\n        default:\n            return key.replace(/([A-Z])/g, ' $1');\n    }\n}\n\nconst ProfileComparisonDialog = ({ profiles, open, onOpenChange }: { profiles: Profile[], open: boolean, onOpenChange: (open: boolean) => void }) => {\n    if (profiles.length !== 2) return null;\n    const [profileA, profileB] = profiles;\n\n    return (\n        <Dialog open={open} onOpenChange={onOpenChange}>\n            <DialogContent className=\"max-w-4xl\">\n                <DialogHeader>\n                    <DialogTitle className=\"font-headline\">Profile Comparison</DialogTitle>\n                    <DialogDescription>Comparing \"{profileA.name}\" and \"{profileB.name}\"</DialogDescription>\n                </DialogHeader>\n                <div className=\"overflow-y-auto max-h-[70vh]\">\n                    <Table>\n                        <TableHeader>\n                            <TableRow>\n                                <TableHead>Setting</TableHead>\n                                <TableHead className=\"text-center\">{profileA.name}</TableHead>\n                                <TableHead className=\"text-center\">{profileB.name}</TableHead>\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                            <TableRow>\n                                <TableCell className=\"font-semibold\">Phone Model</TableCell>\n                                <TableCell className=\"text-center\">{profileA.input.phoneModel}</TableCell>\n                                <TableCell className=\"text-center\">{profileB.input.phoneModel}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell className=\"font-semibold\">DPI</TableCell>\n                                <TableCell className=\"text-center\">{profileA.input.dpi}</TableCell>\n                                <TableCell className=\"text-center\">{profileB.input.dpi}</TableCell>\n                            </TableRow>\n                            {SENSITIVITY_FIELDS.map(key => {\n                                const valA = profileA.recommendation?.recommendations[key as keyof typeof profileA.recommendation.recommendations] ?? profileA.input.inGameSensitivity[key as keyof typeof profileA.input.inGameSensitivity];\n                                const valB = profileB.recommendation?.recommendations[key as keyof typeof profileB.recommendation.recommendations] ?? profileB.input.inGameSensitivity[key as keyof typeof profileB.input.inGameSensitivity];\n                                const isDifferent = valA !== valB;\n                                return (\n                                    <TableRow key={key} className={isDifferent ? 'bg-muted/50' : ''}>\n                                        <TableCell className=\"font-medium capitalize\">{getSensitivityLabel(key)}</TableCell>\n                                        <TableCell className={`text-center font-bold ${isDifferent ? 'text-primary' : ''}`}>{valA}</TableCell>\n                                        <TableCell className={`text-center font-bold ${isDifferent ? 'text-primary' : ''}`}>{valB}</TableCell>\n                                    </TableRow>\n                                )\n                            })}\n                        </TableBody>\n                    </Table>\n                </div>\n            </DialogContent>\n        </Dialog>\n    );\n};\n\nconst COMPARE_PROFILES_AD_CODE = `\n<script type=\"text/javascript\">\n\tatOptions = {\n\t\t'key' : '28af91f7f6fdde419358c862dd2e58d5',\n\t\t'format' : 'iframe',\n\t\t'height' : 250,\n\t\t'width' : 300,\n\t\t'params' : {}\n\t};\n</script>\n<script type=\"text/javascript\" src=\"//establishscarcely.com/28af91f7f6fdde419358c862dd2e58d5/invoke.js\"></script>\n`;\n\n\nexport default function ProfileManager() {\n    const { profiles, isLoading, deleteProfile } = useProfiles();\n    const [selectedProfiles, setSelectedProfiles] = useState<string[]>([]);\n    const [isCompareDialogOpen, setCompareDialogOpen] = useState(false);\n    const [isAdDialogOpen, setAdDialogOpen] = useState(false);\n\n\n    const handleSelectProfile = (profileId: string) => {\n        setSelectedProfiles(prev => {\n            if (prev.includes(profileId)) {\n                return prev.filter(id => id !== profileId);\n            }\n            if (prev.length < 2) {\n                return [...prev, profileId];\n            }\n            return prev; // Limit selection to 2\n        });\n    };\n\n    const handleCompareAction = () => {\n        setAdDialogOpen(false);\n        setCompareDialogOpen(true);\n    }\n    \n    const triggerAd = () => {\n        if (selectedProfiles.length === 2) {\n            setAdDialogOpen(true);\n        }\n    }\n\n    const profilesToCompare = profiles.filter(p => selectedProfiles.includes(p.id));\n\n    if (isLoading) {\n        return (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[...Array(3)].map((_, i) => (\n                    <Card key={i}>\n                        <CardHeader>\n                            <Skeleton className=\"h-6 w-3/4\" />\n                            <Skeleton className=\"h-4 w-1/2\" />\n                        </CardHeader>\n                        <CardContent>\n                            <Skeleton className=\"h-4 w-full\" />\n                            <Skeleton className=\"h-4 w-5/6 mt-2\" />\n                        </CardContent>\n                        <CardFooter>\n                            <Skeleton className=\"h-10 w-24\" />\n                        </CardFooter>\n                    </Card>\n                ))}\n            </div>\n        );\n    }\n\n    if (profiles.length === 0) {\n        return (\n            <div>\n                <div className=\"text-center py-16 border-2 border-dashed rounded-lg\">\n                    <h3 className=\"text-xl font-semibold\">No Profiles Saved</h3>\n                    <p className=\"text-muted-foreground mt-2\">Go to the Booster to create your first profile.</p>\n                    <Button asChild className=\"mt-4 animate-pulse-ring\">\n                        <Link href=\"/booster\">Go to Booster</Link>\n                    </Button>\n                </div>\n                 <div className=\"mt-12\">\n                    <h2 className=\"text-center text-xs font-bold uppercase tracking-widest text-muted-foreground mb-2\">ADS</h2>\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-6\">\n                        <AdPlaceholder />\n                        <AdPlaceholder />\n                        <AdPlaceholder />\n                        <AdPlaceholder />\n                        <AdPlaceholder />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    \n    const renderProfileWithAd = (profile: Profile, index: number) => {\n        const ad = (index + 1) % 2 === 0 && index < profiles.length -1 ? (\n             <div key={`ad-${index}`} className=\"md:col-span-1\">\n                <AdPlaceholder />\n            </div>\n        ) : null;\n\n        const profileCard = (\n            <Card key={profile.id} className=\"flex flex-col\">\n                <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                        <div>\n                            <CardTitle className=\"font-headline\">{profile.name}</CardTitle>\n                            <CardDescription>\n                                Updated {formatDistanceToNow(new Date(profile.updatedAt), { addSuffix: true })}\n                            </CardDescription>\n                        </div>\n                        <Checkbox\n                            checked={selectedProfiles.includes(profile.id)}\n                            onCheckedChange={() => handleSelectProfile(profile.id)}\n                            aria-label={`Select profile ${profile.name}`}\n                        />\n                    </div>\n                </CardHeader>\n                <CardContent className=\"flex-grow\">\n                    <p className=\"text-muted-foreground line-clamp-3\">{profile.description || 'No description.'}</p>\n                </CardContent>\n                <CardFooter className=\"flex justify-between\">\n                     <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                            <Button variant=\"destructive\" size=\"sm\">\n                                <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                            <AlertDialogHeader>\n                            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n                            <AlertDialogDescription>\n                                This action cannot be undone. This will permanently delete the profile \"{profile.name}\".\n                            </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction \n                              onClick={() => deleteProfile(profile.id)}\n                              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                            >\n                                Continue\n                            </AlertDialogAction>\n                            </AlertDialogFooter>\n                        </AlertDialogContent>\n                    </AlertDialog>\n                </CardFooter>\n            </Card>\n        );\n        return ad ? <Fragment key={profile.id}>{profileCard}{ad}</Fragment> : profileCard;\n    }\n\n\n    return (\n        <div>\n            <div className=\"flex items-center justify-end mb-4\">\n                <Button \n                    onClick={triggerAd}\n                    disabled={selectedProfiles.length !== 2}\n                    className={cn(selectedProfiles.length === 2 && 'animate-pulse-ring')}\n                >\n                    <GitCompareArrows className=\"mr-2 h-4 w-4\" /> Compare ({selectedProfiles.length}/2)\n                </Button>\n                <ProfileComparisonDialog \n                    profiles={profilesToCompare} \n                    open={isCompareDialogOpen} \n                    onOpenChange={setCompareDialogOpen} \n                />\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {profiles.map((profile, index) => renderProfileWithAd(profile, index))}\n            </div>\n             <div className=\"mt-12\">\n                <h2 className=\"text-center text-xs font-bold uppercase tracking-widest text-muted-foreground mb-2\">ADS</h2>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-6\">\n                    <AdPlaceholder />\n                    <AdPlaceholder />\n                    <AdPlaceholder />\n                    <AdPlaceholder />\n                    <AdPlaceholder />\n                </div>\n            </div>\n            <AdDialog \n                open={isAdDialogOpen}\n                onOpenChange={setAdDialogOpen}\n                onAdClosed={handleCompareAction}\n                title=\"Unlock Comparison\"\n                description=\"Please view this ad to compare the selected profiles.\"\n            >\n                <AdRenderer htmlContent={COMPARE_PROFILES_AD_CODE} />\n            </AdDialog>\n        </div>\n    );\n}\n",
            "src/app/(main)/profiles/page.tsx": "\n\nimport ProfileManager from './components/profile-manager';\n\nexport default function ProfilesPage() {\n  return (\n    <>\n      <div className=\"space-y-2 mb-8\">\n        <h1 className=\"text-3xl font-bold font-headline tracking-tight\">My Profiles</h1>\n        <p className=\"text-muted-foreground\">\n          Manage and compare your saved sensitivity profiles.\n        </p>\n      </div>\n      <ProfileManager />\n    </>\n  );\n}\n",
            "src/app/globals.css": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 16 93% 54%;\n    --primary-foreground: 0 0% 100%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 34 92% 50%;\n    --accent-foreground: 0 0% 100%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 16 93% 54%;\n    --radius: 0.5rem;\n\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n\n    --sidebar-background: 240 10% 3.9%;\n    --sidebar-foreground: 0 0% 98%;\n    --sidebar-primary: 16 93% 54%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 0 0% 98%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 16 93% 54%;\n  }\n\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 16 93% 54%;\n    --primary-foreground: 0 0% 100%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 34 92% 50%;\n    --accent-foreground: 0 0% 100%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 16 93% 54%;\n\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n\n    --sidebar-background: 240 10% 3.9%;\n    --sidebar-foreground: 0 0% 98%;\n    --sidebar-primary: 16 93% 54%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 0 0% 98%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 16 93% 54%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n",
            "src/app/layout.tsx": "import type {Metadata} from 'next';\nimport { Inter, Space_Grotesk } from 'next/font/google';\nimport './globals.css';\nimport { Toaster } from \"@/components/ui/toaster\"\nimport { ThemeProvider } from '@/components/theme-provider';\nimport HomeLayout from './page-layout';\nimport Script from 'next/script';\n\nconst inter = Inter({ subsets: ['latin'], variable: '--font-body' });\nconst spaceGrotesk = Space_Grotesk({ subsets: ['latin'], variable: '--font-headline' });\n\nexport const metadata: Metadata = {\n  title: 'FREE FIRE SENSIBILIDAD',\n  description: 'Boost your Free Fire sensitivity settings for better headshots.',\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body className={`${inter.variable} ${spaceGrotesk.variable} font-body`}>\n        <ThemeProvider\n            attribute=\"class\"\n            defaultTheme=\"dark\"\n            enableSystem\n            disableTransitionOnChange\n        >\n            <HomeLayout>{children}</HomeLayout>\n            <Toaster />\n        </ThemeProvider>\n        <Script id=\"social-bar-ad\" type='text/javascript' src='//establishscarcely.com/e1/97/c1/e197c1e6b35fbe5f83cab34560e55d2d.js' />\n        <Script id=\"anti-adblock\" type='text/javascript' src='//establishscarcely.com/ff/52/60/ff52600bd52f3202cf8986de28cc3944.js' />\n      </body>\n    </html>\n  );\n}\n",
            "src/app/page-layout.tsx": "\n'use client';\n\nimport { usePathname } from 'next/navigation';\n\nexport default function HomeLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const pathname = usePathname();\n\n  // On initial load of the app, pathname is `/`, which shows the splash screen.\n  // We return null for the root page to avoid flashing the layout.\n  if (pathname === '/') {\n    return <>{children}</>;\n  }\n\n  return <>{children}</>;\n}\n",
            "src/app/page.tsx": "'use client';\n\nimport { useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport SplashScreen from '@/components/splash-screen';\n\nexport default function InitialPage() {\n  const router = useRouter();\n  \n  useEffect(() => {\n      const timer = setTimeout(() => {\n        router.replace('/booster');\n      }, 2000); // Splash screen duration\n      return () => clearTimeout(timer);\n  }, [router]);\n\n  return <SplashScreen />;\n}\n",
            "src/components/ad-dialog.tsx": "\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useTheme } from 'next-themes';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Gift } from 'lucide-react';\n\ninterface AdDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onAdClosed: () => void;\n  title: string;\n  description: string;\n  children: React.ReactNode;\n}\n\nconst AD_WAIT_SECONDS = 30;\n\nexport const AdDialog = ({ open, onOpenChange, onAdClosed, title, description, children }: AdDialogProps) => {\n  const [countdown, setCountdown] = useState(AD_WAIT_SECONDS);\n  const [isContinueDisabled, setContinueDisabled] = useState(true);\n  const { theme, setTheme } = useTheme();\n  const [originalTheme, setOriginalTheme] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (open) {\n      // Force dark theme for ad visibility and save the original theme\n      if (theme !== 'dark') {\n        setOriginalTheme(theme);\n        setTheme('dark');\n      }\n      \n      // Reset state when dialog opens\n      setContinueDisabled(true);\n      setCountdown(AD_WAIT_SECONDS);\n\n      const timer = setInterval(() => {\n        setCountdown((prevCountdown) => {\n          if (prevCountdown <= 1) {\n            clearInterval(timer);\n            setContinueDisabled(false);\n            return 0;\n          }\n          return prevCountdown - 1;\n        });\n      }, 1000);\n\n      // Cleanup interval on component unmount or dialog close\n      return () => clearInterval(timer);\n    } else {\n      // Restore original theme when dialog closes\n      if (originalTheme) {\n        setTheme(originalTheme);\n        setOriginalTheme(undefined); // Reset for next time\n      }\n    }\n  }, [open, theme, setTheme, originalTheme]);\n\n  const handleContinue = () => {\n    onAdClosed();\n  };\n\n  const handleOpenChange = (isOpen: boolean) => {\n     if (!isOpen) {\n        // If closing, restore theme\n        if (originalTheme) {\n            setTheme(originalTheme);\n            setOriginalTheme(undefined);\n        }\n     }\n     onOpenChange(isOpen);\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={handleOpenChange}>\n      <DialogContent \n        className=\"sm:max-w-md\" \n        hideCloseButton={true}\n        onInteractOutside={(e) => e.preventDefault()}\n      >\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2 font-headline\">\n            <Gift className=\"text-primary\"/>\n            {title}\n          </DialogTitle>\n          <DialogDescription>\n            {description}\n          </DialogDescription>\n        </DialogHeader>\n        \n        {children}\n        \n        <DialogFooter>\n          <Button \n            type=\"button\" \n            className=\"w-full\"\n            onClick={handleContinue}\n            disabled={isContinueDisabled}\n          >\n            {isContinueDisabled ? `Please wait ${countdown}s` : 'Continue'}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n",
            "src/components/ad-placeholder.tsx": "\nimport AdRenderer from '@/components/ad-renderer';\n\nconst NATIVE_AD_CODE = `\n<script async=\\\"async\\\" data-cfasync=\\\"false\\\" src=\\\"//establishscarcely.com/4e86c66bd617dde907cb05c23671c0c9/invoke.js\\\"></script>\n<div id=\\\"container-4e86c66bd617dde907cb05c23671c0c9\\\"></div>\n`;\n\nexport default function AdPlaceholder() {\n  return (\n    <div className=\"space-y-2\">\n        <p className=\"text-center text-xs font-bold uppercase tracking-widest text-muted-foreground\">\n            ADS\n        </p>\n        <AdRenderer htmlContent={NATIVE_AD_CODE} className=\"aspect-square\" />\n    </div>\n  );\n}\n",
            "src/components/ad-renderer.tsx": "\n'use client';\n\nimport React from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface AdRendererProps {\n  htmlContent: string;\n  className?: string;\n}\n\nexport default function AdRenderer({ htmlContent, className }: AdRendererProps) {\n  return (\n    <div\n      className={cn(\"flex aspect-video w-full flex-col items-center justify-center rounded-lg border-2 border-dashed bg-muted/50 p-4 text-center\", className)}\n      dangerouslySetInnerHTML={{ __html: htmlContent }}\n    />\n  );\n}\n",
            "src/components/nav.tsx": "\n'use client';\n\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport { User, BotMessageSquare } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nconst navItems = [\n  { href: '/booster', label: 'Booster', icon: BotMessageSquare },\n  { href: '/profiles', label: 'My Profiles', icon: User },\n];\n\nexport function Nav() {\n  const pathname = usePathname();\n\n  return (\n    <nav className=\"grid h-16 grid-cols-2 gap-1 p-1\">\n      {navItems.map((item) => {\n        const isActive = pathname === item.href;\n        return (\n          <Link\n            key={item.href}\n            href={item.href}\n            className={cn(\n              'flex flex-col items-center justify-center gap-1 rounded-lg p-2 text-muted-foreground transition-colors hover:text-primary',\n              isActive && 'text-primary'\n            )}\n          >\n            <item.icon className=\"h-6 w-6\" />\n            <span className=\"text-xs font-medium\">{item.label}</span>\n          </Link>\n        );\n      })}\n    </nav>\n  );\n}\n",
            "src/components/page-shell.tsx": "import { Nav } from '@/components/nav';\nimport { ThemeToggle } from '@/components/theme-toggle';\nimport Link from 'next/link';\nimport { Skull } from 'lucide-react';\n\nexport default function PageShell({ \n  children, \n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <div className=\"relative flex min-h-screen w-full flex-col\">\n       <header className=\"sticky top-0 z-10 flex h-16 items-center justify-between gap-4 border-b bg-background/95 px-4 backdrop-blur-sm sm:px-6\">\n          <Link href=\"/\" className=\"flex items-center gap-2 font-headline text-lg font-semibold\">\n            <Skull className=\"h-6 w-6 text-primary\" />\n            <span className=\"uppercase text-primary\">free fire sensibilidad</span>\n          </Link>\n          <div className=\"flex items-center gap-2\">\n            <ThemeToggle />\n          </div>\n        </header>\n       <main className=\"flex-1 overflow-auto p-4 md:p-8 pb-20\">\n        {children}\n      </main>\n      <footer className=\"fixed bottom-0 z-10 w-full border-t bg-background\">\n          <Nav />\n      </footer>\n    </div>\n  );\n}\n",
            "src/components/rewarded-ad-dialog.tsx": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Gift } from 'lucide-react';\n\ninterface AdDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onAdClosed: () => void;\n  title: string;\n  description: string;\n}\n\nexport const AdDialog = ({ open, onOpenChange, onAdClosed, title, description }: AdDialogProps) => {\n\n  const handleContinue = () => {\n    onAdClosed();\n  };\n\n  // When the dialog opens, call the onAdClosed callback after a short delay \n  // to simulate an ad being \"watched\" and then allowing the user to proceed.\n  // This can be replaced with actual ad SDK events later.\n  useEffect(() => {\n    if (open) {\n      const timer = setTimeout(() => {\n        // In a real scenario, you might wait for an ad to finish.\n        // For now, we'll just enable the continue button after a few seconds.\n      }, 2000); // Simulating a short ad view time\n      return () => clearTimeout(timer);\n    }\n  }, [open]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\" onEscapeKeyDown={(e) => e.preventDefault()}>\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2 font-headline\">\n            <Gift className=\"text-primary\"/>\n            {title}\n          </DialogTitle>\n          <DialogDescription>\n            {description}\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"flex aspect-video w-full flex-col items-center justify-center rounded-lg border-2 border-dashed bg-muted/50 p-4 text-center\">\n            {/* Adsterra Ad Code will be placed here */}\n            <h3 className=\"text-lg font-semibold text-muted-foreground\">Ad Placeholder</h3>\n            <p className=\"mt-2 text-sm text-muted-foreground\">Ad content will be displayed in this area.</p>\n        </div>\n        <DialogFooter>\n          <Button \n            type=\"button\" \n            className=\"w-full\"\n            onClick={handleContinue}\n          >\n            Continue\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n",
            "src/components/splash-screen.tsx": "import { Skull } from 'lucide-react';\n\nexport default function SplashScreen() {\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-background text-primary\">\n      <div className=\"flex flex-col items-center gap-4 mb-4\">\n        <Skull className=\"h-16 w-16 text-primary\" />\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"h-3 w-3 bg-primary rounded-full animate-pulse [animation-delay:-0.3s]\"></div>\n        <div className=\"h-3 w-3 bg-primary rounded-full animate-pulse [animation-delay:-0.15s]\"></div>\n        <div className=\"h-3 w-3 bg-primary rounded-full animate-pulse\"></div>\n      </div>\n    </div>\n  );\n}\n",
            "src/components/theme-provider.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\"\nimport { type ThemeProviderProps } from \"next-themes/dist/types\"\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n",
            "src/components/theme-toggle.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport { Moon, Sun } from \"lucide-react\"\nimport { useTheme } from \"next-themes\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\nexport function ThemeToggle() {\n  const { setTheme } = useTheme()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"icon\">\n          <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme(\"light\")}>\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"dark\")}>\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"system\")}>\n          System\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n",
            "src/hooks/use-mobile.tsx": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
            "src/hooks/use-profiles.ts": "\"use client\";\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { toast } from '@/hooks/use-toast';\nimport type { Profile } from '@/lib/types';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst STORAGE_KEY = 'freefireSensibilidadProfiles';\n\nexport function useProfiles() {\n  const [profiles, setProfiles] = useState<Profile[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    try {\n      const items = window.localStorage.getItem(STORAGE_KEY);\n      if (items) {\n        setProfiles(JSON.parse(items));\n      }\n    } catch (error) {\n      console.error('Failed to load profiles from local storage', error);\n      toast({\n        title: \"Error\",\n        description: \"Could not load your saved profiles.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const saveProfile = useCallback((profileData: Omit<Profile, 'id' | 'createdAt' | 'updatedAt'> & { id?: string }) => {\n    try {\n      const now = new Date().toISOString();\n      let updatedProfiles: Profile[];\n\n      if (profileData.id) {\n        // Update existing profile\n        updatedProfiles = profiles.map(p => \n          p.id === profileData.id ? { ...p, ...profileData, updatedAt: now } : p\n        );\n        toast({ title: \"Profile Updated\", description: `\\\"${profileData.name}\\\" has been updated.` });\n      } else {\n        // Create new profile\n        const newProfile: Profile = {\n          ...profileData,\n          id: uuidv4(),\n          createdAt: now,\n          updatedAt: now,\n        };\n        updatedProfiles = [...profiles, newProfile];\n        toast({ title: \"Profile Saved\", description: `\\\"${profileData.name}\\\" has been saved.` });\n      }\n\n      window.localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedProfiles));\n      setProfiles(updatedProfiles);\n    } catch (error) {\n      console.error('Failed to save profile', error);\n      toast({\n        title: \"Error\",\n        description: \"Could not save your profile.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [profiles]);\n\n  const deleteProfile = useCallback((profileId: string) => {\n    try {\n      const updatedProfiles = profiles.filter(p => p.id !== profileId);\n      window.localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedProfiles));\n      setProfiles(updatedProfiles);\n      toast({ title: \"Profile Deleted\", description: \"The profile has been successfully deleted.\" });\n    } catch (error) {\n      console.error('Failed to delete profile', error);\n      toast({\n        title: \"Error\",\n        description: \"Could not delete the profile.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [profiles]);\n\n  return { profiles, isLoading, saveProfile, deleteProfile };\n}\n",
            "src/hooks/use-toast.ts": "\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
            "src/lib/actions.ts": "'use server';\n\nimport { getSensitivityRecommendation, SensitivityRecommendationInput, SensitivityRecommendationOutput } from '@/ai/flows/sensitivity-recommendation';\nimport { z } from 'zod';\nimport { PHONE_BRANDS } from './constants';\n\nconst formSchema = z.object({\n  phoneBrand: z.string().min(1, 'Please select a phone brand.'),\n  phoneModel: z.string().min(1, 'Please select a phone model.'),\n  dpi: z.coerce.number().min(100).max(1200),\n  inGameSensitivity: z.object({\n    general: z.coerce.number().min(0).max(200),\n    redDot: z.coerce.number().min(0).max(200),\n    twoXSight: z.coerce.number().min(0).max(200),\n    fourXSight: z.coerce.number().min(0).max(200),\n    awm: z.coerce.number().min(0).max(200),\n    freeLook: z.coerce.number().min(0).max(200),\n  }),\n});\n\n\nexport interface ActionState {\n  error?: string;\n  data?: SensitivityRecommendationOutput;\n}\n\nexport async function getRecommendationAction(\n  prevState: ActionState,\n  formData: FormData\n): Promise<ActionState> {\n  try {\n    const rawFormData = Object.fromEntries(formData.entries());\n    \n    // Manually construct the nested object for validation\n    const dataToValidate = {\n      phoneBrand: rawFormData.phoneBrand,\n      phoneModel: rawFormData.phoneModel,\n      dpi: rawFormData.dpi,\n      inGameSensitivity: {\n        general: rawFormData['inGameSensitivity.general'],\n        redDot: rawFormData['inGameSensitivity.redDot'],\n        twoXSight: rawFormData['inGameSensitivity.twoXSight'],\n        fourXSight: rawFormData['inGameSensitivity.fourXSight'],\n        awm: rawFormData['inGameSensitivity.awm'],\n        freeLook: rawFormData['inGameSensitivity.freeLook'],\n      }\n    };\n\n    const validatedFields = formSchema.safeParse(dataToValidate);\n    \n    if (!validatedFields.success) {\n      const error = validatedFields.error.flatten().fieldErrors;\n      const firstErrorKey = Object.keys(error)[0];\n      if (firstErrorKey && firstErrorKey !== 'inGameSensitivity') {\n        return { error: (error[firstErrorKey as keyof typeof error] as string[])[0] };\n      }\n      const firstInGameError = Object.values(error.inGameSensitivity ?? {})[0]?.[0];\n      return { error: firstInGameError || \"Invalid data provided.\" };\n    }\n    \n    const {phoneBrand, phoneModel, dpi, inGameSensitivity} = validatedFields.data\n    \n    const brandName = PHONE_BRANDS[phoneBrand as keyof typeof PHONE_BRANDS] || phoneBrand;\n\n    const inputForAI: SensitivityRecommendationInput = {\n      phoneModel: `${brandName} ${phoneModel}`,\n      dpi,\n      inGameSensitivity,\n    }\n\n    const result = await getSensitivityRecommendation(inputForAI);\n    return { data: result };\n\n  } catch (error) {\n    console.error(error);\n    const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred. Please try again.';\n    return { error: errorMessage };\n  }\n}\n",
            "src/lib/constants.ts": "import { SensitivityRecommendationInput } from \"@/ai/flows/sensitivity-recommendation\";\n\nexport const PHONE_BRANDS = {\n  samsung: \"Samsung\",\n  apple: \"Apple\",\n  xiaomi: \"Xiaomi\",\n  huawei: \"Huawei\",\n  infinix: \"Infinix\",\n  oppo: \"Oppo\",\n  vivo: \"Vivo\",\n  realme: \"Realme\",\n  oneplus: \"OnePlus\",\n  google: \"Google\",\n  motorola: \"Motorola\",\n  sony: \"Sony\",\n  asus: \"Asus\",\n  honor: \"Honor\",\n  nokia: \"Nokia\",\n  lg: \"LG\",\n  lenovo: \"Lenovo\",\n  htc: \"HTC\",\n  zte: \"ZTE\",\n  tcl: \"TCL\",\n  nothing: \"Nothing\",\n  tecno: \"Tecno\",\n  meizu: \"Meizu\",\n  other: \"Other\",\n};\n\nexport const PHONE_MODELS: Record<keyof typeof PHONE_BRANDS, string[]> = {\n  samsung: [\n    // 2024\n    \"Galaxy S24 Ultra\", \"Galaxy S24+\", \"Galaxy S24\", \"Galaxy Z Fold 6\", \"Galaxy Z Flip 6\", \"Galaxy A55\", \"Galaxy A35\", \"Galaxy A15\", \"Galaxy A05s\", \"Galaxy A05\", \"Galaxy M55\", \"Galaxy M35\", \"Galaxy M15\", \"Galaxy F55\", \"Galaxy F15\", \"Galaxy C55\",\n    // 2023\n    \"Galaxy S23 Ultra\", \"Galaxy S23+\", \"Galaxy S23\", \"Galaxy S23 FE\", \"Galaxy Z Fold 5\", \"Galaxy Z Flip 5\", \"Galaxy A54\", \"Galaxy A34\", \"Galaxy A24\", \"Galaxy A14\", \"Galaxy A04s\", \"Galaxy A04\", \"Galaxy A04e\", \"Galaxy M54\", \"Galaxy M34\", \"Galaxy M14\", \"Galaxy M04\", \"Galaxy F54\", \"Galaxy F34\", \"Galaxy F14\", \"Galaxy F04\",\n    // 2022\n    \"Galaxy S22 Ultra\", \"Galaxy S22+\", \"Galaxy S22\", \"Galaxy Z Fold 4\", \"Galaxy Z Flip 4\", \"Galaxy A73\", \"Galaxy A53\", \"Galaxy A33\", \"Galaxy A23\", \"Galaxy A13\", \"Galaxy A03\", \"Galaxy A03s\", \"Galaxy A03 Core\", \"Galaxy M53\", \"Galaxy M33\", \"Galaxy M23\", \"Galaxy M13\", \"Galaxy F23\", \"Galaxy F13\",\n    // 2021\n    \"Galaxy S21 Ultra\", \"Galaxy S21+\", \"Galaxy S21\", \"Galaxy S21 FE\", \"Galaxy Z Fold 3\", \"Galaxy Z Flip 3\", \"Galaxy A82\", \"Galaxy A72\", \"Galaxy A52s\", \"Galaxy A52\", \"Galaxy A42\", \"Galaxy A32\", \"Galaxy A22\", \"Galaxy A12\", \"Galaxy A02s\", \"Galaxy M62\", \"Galaxy M52\", \"Galaxy M42\", \"Galaxy M32\", \"Galaxy M22\", \"Galaxy M12\", \"Galaxy M02s\", \"Galaxy M02\", \"Galaxy F62\", \"Galaxy F52\", \"Galaxy F42\", \"Galaxy F22\", \"Galaxy F12\", \"Galaxy F02s\",\n    // 2020\n    \"Galaxy S20 Ultra\", \"Galaxy S20+\", \"Galaxy S20\", \"Galaxy S20 FE\", \"Galaxy Note 20 Ultra\", \"Galaxy Note 20\", \"Galaxy Z Fold 2\", \"Galaxy Z Flip\", \"Galaxy A71\", \"Galaxy A51\", \"Galaxy A41\", \"Galaxy A31\", \"Galaxy A21s\", \"Galaxy A11\", \"Galaxy A01\", \"Galaxy A01 Core\", \"Galaxy M51\", \"Galaxy M31s\", \"Galaxy M31\", \"Galaxy M21\", \"Galaxy M11\", \"Galaxy M01\", \"Galaxy M01s\", \"Galaxy F41\",\n    // 2019\n    \"Galaxy S10+\", \"Galaxy S10\", \"Galaxy S10e\", \"Galaxy S10 Lite\", \"Galaxy Note 10+\", \"Galaxy Note 10\", \"Galaxy Note 10 Lite\", \"Galaxy Fold\", \"Galaxy A90\", \"Galaxy A80\", \"Galaxy A70\", \"Galaxy A60\", \"Galaxy A50s\", \"Galaxy A50\", \"Galaxy A40\", \"Galaxy A30s\", \"Galaxy A30\", \"Galaxy A20s\", \"Galaxy A20\", \"Galaxy A20e\", \"Galaxy A10s\", \"Galaxy A10\", \"Galaxy A10e\", \"Galaxy M40\", \"Galaxy M30s\", \"Galaxy M30\", \"Galaxy M20\", \"Galaxy M10\",\n    // 2018\n    \"Galaxy S9+\", \"Galaxy S9\", \"Galaxy Note 9\", \"Galaxy A9 (2018)\", \"Galaxy A8 Star\", \"Galaxy A7 (2018)\", \"Galaxy A6+\", \"Galaxy A6\", \"Galaxy J8\", \"Galaxy J6+\", \"Galaxy J6\", \"Galaxy J4+\", \"Galaxy J4\", \"Galaxy J4 Core\", \"Galaxy J2 Core (2018)\",\n    // 2017\n    \"Galaxy S8+\", \"Galaxy S8\", \"Galaxy Note 8\", \"Galaxy S8 Active\", \"Galaxy A8 (2018)\", \"Galaxy A7 (2017)\", \"Galaxy A5 (2017)\", \"Galaxy A3 (2017)\", \"Galaxy J7 Pro\", \"Galaxy J7 Max\", \"Galaxy J7 (2017)\", \"Galaxy J5 (2017)\", \"Galaxy J3 (2017)\", \"Galaxy J7 Prime 2\", \"Galaxy J2 Pro (2018)\",\n    // 2016\n    \"Galaxy S7 Edge\", \"Galaxy S7\", \"Galaxy Note 7\", \"Galaxy A9 Pro (2016)\", \"Galaxy A9 (2016)\", \"Galaxy A7 (2016)\", \"Galaxy A5 (2016)\", \"Galaxy A3 (2016)\", \"Galaxy J7 Prime\", \"Galaxy J7 (2016)\", \"Galaxy J5 Prime\", \"Galaxy J5 (2016)\", \"Galaxy J3 (2016)\", \"Galaxy J2 Prime\", \"Galaxy J2 (2016)\", \"Galaxy J1 Ace\",\n    // 2015\n    \"Galaxy S6 Edge+\", \"Galaxy S6 Edge\", \"Galaxy S6\", \"Galaxy Note 5\", \"Galaxy S6 Active\", \"Galaxy A8\", \"Galaxy A7 (2015)\", \"Galaxy A5 (2015)\", \"Galaxy A3 (2015)\", \"Galaxy J7\", \"Galaxy J5\", \"Galaxy J2\", \"Galaxy J1 (2015)\",\n  ],\n  apple: [\n    // 2024 (Expected)\n    \"iPhone 16 Pro Max\", \"iPhone 16 Pro\", \"iPhone 16 Plus\", \"iPhone 16\",\n    // 2023\n    \"iPhone 15 Pro Max\", \"iPhone 15 Pro\", \"iPhone 15 Plus\", \"iPhone 15\",\n    // 2022\n    \"iPhone 14 Pro Max\", \"iPhone 14 Pro\", \"iPhone 14 Plus\", \"iPhone 14\", \"iPhone SE (3rd generation)\",\n    // 2021\n    \"iPhone 13 Pro Max\", \"iPhone 13 Pro\", \"iPhone 13\", \"iPhone 13 mini\",\n    // 2020\n    \"iPhone 12 Pro Max\", \"iPhone 12 Pro\", \"iPhone 12\", \"iPhone 12 mini\", \"iPhone SE (2nd generation)\",\n    // 2019\n    \"iPhone 11 Pro Max\", \"iPhone 11 Pro\", \"iPhone 11\",\n    // 2018\n    \"iPhone XS Max\", \"iPhone XS\", \"iPhone XR\",\n    // 2017\n    \"iPhone X\", \"iPhone 8 Plus\", \"iPhone 8\",\n    // 2016\n    \"iPhone 7 Plus\", \"iPhone 7\", \"iPhone SE (1st generation)\",\n    // 2015\n    \"iPhone 6S Plus\", \"iPhone 6S\",\n  ],\n  xiaomi: [\n    // Flagship\n    \"Xiaomi 14 Ultra\", \"Xiaomi 14\", \"Xiaomi 13T Pro\", \"Xiaomi 13T\", \"Xiaomi 13 Ultra\", \"Xiaomi 13 Pro\", \"Xiaomi 13\", \"Xiaomi 12S Ultra\", \"Xiaomi 12 Pro\", \"Xiaomi 12\", \"Xiaomi Mix Fold 3\", \"Xiaomi Mix Fold 2\",\n    // POCO Flagship/Mid-range\n    \"Poco F6 Pro\", \"Poco F6\", \"Poco F5 Pro\", \"Poco F5\", \"Poco X6 Pro\", \"Poco X6\", \"Poco X5 Pro\", \"Poco X5\", \"Poco M6 Pro\", \"Poco M6\", \"Poco M5\", \"Poco M4 Pro\",\n    // Redmi Note Series (Mid-range)\n    \"Redmi Note 13 Pro+\", \"Redmi Note 13 Pro\", \"Redmi Note 13\", \"Redmi Note 13R Pro\", \"Redmi Note 12 Pro+\", \"Redmi Note 12 Pro\", \"Redmi Note 12\", \"Redmi Note 12 Turbo\", \"Redmi Note 11 Pro+\", \"Redmi Note 11 Pro\", \"Redmi Note 11\", \"Redmi Note 11S\", \"Redmi Note 11T Pro\", \"Redmi Note 10 Pro\", \"Redmi Note 10S\", \"Redmi Note 10\",\n    // Redmi (Budget)\n    \"Redmi 13C\", \"Redmi 12\", \"Redmi 12C\", \"Redmi A3\", \"Redmi A2+\", \"Redmi A1\", \"Redmi 10\", \"Redmi 10C\", \"Redmi 10A\", \"Redmi 9\", \"Redmi 9A\", \"Redmi 9C\", \"Redmi 9T\",\n    // Gaming\n    \"Black Shark 5 Pro\", \"Black Shark 5\", \"Black Shark 4 Pro\", \"Black Shark 4\",\n  ],\n  huawei: [\n    // 2024\n    \"Pura 70 Ultra\", \"Pura 70 Pro+\", \"Pura 70 Pro\", \"Pura 70\", \"Nova 12 Ultra\", \"Nova 12 Pro\", \"Nova 12s\", \"Nova 12i\", \"Nova 12 SE\",\n    // 2023\n    \"Mate 60 Pro+\", \"Mate 60 Pro\", \"Mate 60\", \"Mate X5\", \"P60 Pro\", \"P60\", \"P60 Art\", \"Mate X3\", \"Nova 11 Ultra\", \"Nova 11 Pro\", \"Nova 11\", \"Nova 11i\", \"Nova 11 SE\", \"Enjoy 60 Pro\", \"Enjoy 60X\", \"Enjoy 60\",\n    // 2022\n    \"Mate 50 Pro\", \"Mate 50\", \"Mate 50 RS Porsche Design\", \"Mate 50E\", \"Mate Xs 2\", \"P50 Pocket\", \"P50E\", \"Nova 10 Pro\", \"Nova 10\", \"Nova 10z\", \"Nova 10 SE\", \"Nova Y90\", \"Nova Y70 Plus\", \"Nova Y61\", \"Enjoy 50 Pro\",\n    // 2021\n    \"P50 Pro\", \"P50\", \"Mate X2 4G\", \"Mate 40E Pro\", \"Nova 9 Pro\", \"Nova 9\", \"Nova 9 SE\", \"Nova 8i\", \"Nova 8 SE 4G\", \"Nova Y60\", \"Enjoy 20e\",\n    // 2020\n    \"Mate 40 Pro+\", \"Mate 40 Pro\", \"Mate 40\", \"Mate 40 RS Porsche Design\", \"Mate 30E Pro 5G\", \"P40 Pro+\", \"P40 Pro\", \"P40\", \"P40 lite\", \"P40 lite E\", \"P Smart 2021\", \"Nova 8 Pro 5G\", \"Nova 8 5G\", \"Nova 8 SE\", \"Nova 7 Pro 5G\", \"Nova 7 5G\", \"Nova 7 SE\", \"Nova 7i\", \"Y9a\", \"Y8s\", \"Y7p\", \"Y6p\", \"Enjoy 20 Plus 5G\", \"Enjoy 20 5G\", \"Enjoy 20 Pro\",\n    // 2019\n    \"Mate 30 Pro 5G\", \"Mate 30 Pro\", \"Mate 30 5G\", \"Mate 30\", \"Mate 20 X (5G)\", \"Mate X\", \"P30 Pro\", \"P30\", \"P30 lite\", \"P Smart Z\", \"P Smart 2020\", \"Nova 5 Pro\", \"Nova 5i Pro\", \"Nova 5z\", \"Nova 5T\", \"Nova 5i\", \"Nova Lite 3+\", \"Y9 Prime (2019)\", \"Y9s\", \"Y7 (2019)\", \"Y6 (2019)\", \"Y5 (2019)\", \"Enjoy 10s\", \"Enjoy 10 Plus\", \"Enjoy 10\",\n    // 2018\n    \"Mate 20 Pro\", \"Mate 20\", \"Mate 20 X\", \"Mate 20 RS Porsche Design\", \"Mate 10\", \"P20 Pro\", \"P20\", \"P20 lite\", \"P Smart+\", \"P Smart (2019)\", \"Nova 4\", \"Nova 3\", \"Nova 3i\", \"Y9 (2019)\", \"Y7 Prime (2018)\", \"Y6 (2018)\",\n    // 2017\n    \"Mate 10 Pro\", \"Mate 10 Porsche Design\", \"P10 Plus\", \"P10\", \"P10 Lite\", \"Nova 2s\", \"Nova 2 Plus\", \"Nova 2\", \"P8 Lite (2017)\", \"Y7 Prime\", \"Y7\", \"Y6 (2017)\", \"Y5 (2017)\",\n    // 2016\n    \"Mate 9 Pro\", \"Mate 9\", \"Mate 9 Porsche Design\", \"P9 Plus\", \"P9\", \"P9 Lite\", \"Nova Plus\", \"Nova\", \"GR5\", \"Y6II Compact\", \"Y5II\", \"Y3II\",\n    // 2015\n    \"Mate 8\", \"Mate S\", \"P8\", \"P8 Lite\", \"G8\", \"Honor 7\", \"ShotX\",\n  ],\n  infinix: [\n    // GT Series (Gaming)\n    \"GT 20 Pro\", \"GT 10 Pro\",\n    // Note Series (Performance/Mid-range)\n    \"Note 40 Pro+ 5G\", \"Note 40 Pro 5G\", \"Note 40 Pro\", \"Note 40\", \"Note 30 VIP\", \"Note 30 Pro\", \"Note 30\", \"Note 12 VIP\", \"Note 12 G96\", \"Note 12i\", \"Note 11 Pro\", \"Note 11s\", \"Note 10 Pro\",\n    // Zero Series (Flagship/Camera)\n    \"Zero 30 5G\", \"Zero 30 4G\", \"Zero Ultra\", \"Zero 20\", \"Zero X Pro\", \"Zero X Neo\",\n    // Hot Series (Budget)\n    \"Hot 40 Pro\", \"Hot 40i\", \"Hot 40\", \"Hot 30 Play\", \"Hot 30i\", \"Hot 30\", \"Hot 20s\", \"Hot 20\", \"Hot 12 Play\", \"Hot 12\",\n    // Smart Series (Entry-level)\n    \"Smart 8 Pro\", \"Smart 8\", \"Smart 7\",\n  ],\n  oppo: [\n    // Find Series (Flagship)\n    \"Find X7 Ultra\", \"Find X7\", \"Find N3\", \"Find N3 Flip\", \"Find X6 Pro\", \"Find X6\", \"Find N2\", \"Find N2 Flip\", \"Find X5 Pro\", \"Find X5\", \"Find X3 Pro\", \"Find X3\",\n    // Reno Series (Upper Mid-range)\n    \"Reno12 Pro\", \"Reno12\", \"Reno11 Pro\", \"Reno11\", \"Reno11 F\", \"Reno10 Pro+\", \"Reno10 Pro\", \"Reno10\", \"Reno9 Pro+\", \"Reno9 Pro\", \"Reno9\", \"Reno8 Pro\", \"Reno8\", \"Reno8 T\", \"Reno7 Pro\", \"Reno7\", \"Reno6 Pro+\", \"Reno6 Pro\", \"Reno6\",\n    // A Series (Budget/Mid-range)\n    \"A60\", \"A3 Pro\", \"A1s\", \"A98\", \"A79\", \"A78\", \"A77s\", \"A58\", \"A57e\", \"A57s\", \"A38\", \"A18\", \"A17\", \"A17k\", \"A96\", \"A76\", \"A55\", \"A54\", \"A36\", \"A16\", \"A16K\", \"A15s\", \"A15\",\n    // K Series (Mid-range)\n    \"K12\", \"K11x\", \"K11\", \"K10 Pro\", \"K10\", \"K9 Pro\", \"K9s\",\n  ],\n  vivo: [\n    \"X100 Ultra\", \"X100s Pro\", \"X Fold3 Pro\", \"V30 Pro\", \"X100 Pro\", \"iQOO 12\", \"X90 Pro+\", \"iQOO 11\", \"X80 Pro\", \"iQOO 9 Pro\",\n  ],\n  realme: [\n    // GT Series (Flagship/Upper Mid-range)\n    \"GT 6\", \"GT 6T\", \"GT5 Pro\", \"GT5\", \"GT3\", \"GT Neo 6\", \"GT Neo 6 SE\", \"GT Neo 5\", \"GT Neo 5 SE\", \"GT2 Pro\", \"GT2\", \"GT Master\", \"GT Neo 3\", \"GT Neo 3T\", \"GT Neo 2\",\n    // Numbered Series (Mid-range)\n    \"Realme 12 Pro+\", \"Realme 12 Pro\", \"Realme 12+\", \"Realme 12\", \"Realme 11 Pro+\", \"Realme 11 Pro\", \"Realme 11\", \"Realme 10 Pro+\", \"Realme 10 Pro\", \"Realme 10\", \"Realme 9 Pro+\", \"Realme 9 Pro\", \"Realme 9\", \"Realme 9i\", \"Realme 8 Pro\", \"Realme 8\", \"Realme 8i\", \"Realme 8s\", \"Realme 7\", \"Realme 6\", \"Realme 5\",\n    // C Series (Budget)\n    \"C67\", \"C65\", \"C63\", \"C55\", \"C53\", \"C51\", \"C35\", \"C33\", \"C31\", \"C30\", \"C25s\", \"C21Y\", \"C11 (2021)\",\n    // Narzo Series (Gaming/Budget)\n    \"Narzo 70 Pro\", \"Narzo 70x\", \"Narzo 60 Pro\", \"Narzo 60\", \"Narzo N55\", \"Narzo N53\", \"Narzo 50 Pro\", \"Narzo 50\", \"Narzo 50i\", \"Narzo 30 Pro\", \"Narzo 20 Pro\",\n  ],\n  oneplus: [\n    \"OnePlus 12\", \"OnePlus 12R\", \"OnePlus Open\", \"OnePlus 11\", \"OnePlus 10T\", \"OnePlus 10 Pro\", \"OnePlus 9 Pro\", \"OnePlus 8T\", \"OnePlus Nord 3\",\n  ],\n  google: [\n    \"Pixel 8a\", \"Pixel 8 Pro\", \"Pixel 8\", \"Pixel Fold\", \"Pixel 7a\", \"Pixel 7 Pro\", \"Pixel 7\", \"Pixel 6a\", \"Pixel 6 Pro\", \"Pixel 6\", \"Pixel 5a\", \"Pixel 5\", \"Pixel 4a 5G\", \"Pixel 4 XL\", \"Pixel 4\",\n  ],\n  motorola: [\n    \"Razr 50 Ultra\", \"Edge 50 Ultra\", \"Edge 50 Pro\", \"ThinkPhone\", \"Edge 40 Pro\", \"Razr 40 Ultra\", \"Edge 30 Ultra\", \"Edge+ (2022)\",\n  ],\n  sony: [\n    \"Xperia 1 VI\", \"Xperia 10 VI\", \"Xperia 5 V\", \"Xperia 1 V\", \"Xperia 5 IV\", \"Xperia 1 IV\", \"Xperia Pro-I\",\n  ],\n  asus: [\n    \"Zenfone 11 Ultra\", \"ROG Phone 8 Pro\", \"ROG Phone 8\", \"Zenfone 10\", \"ROG Phone 7 Ultimate\", \"Zenfone 9\", \"ROG Phone 6D Ultimate\", \"ROG Phone 5s Pro\",\n  ],\n  honor: [\n      \"Magic6 Pro\", \"Magic V2\", \"Honor 90\", \"Magic5 Pro\", \"Magic Vs\", \"Honor 70\", \"Magic4 Ultimate\",\n  ],\n  nokia: [\n      \"XR21\", \"G42\", \"X30\", \"G60\", \"Nokia 8.3 5G\", \"Nokia 9 PureView\",\n  ],\n  lg: [\n      \"Wing\", \"Velvet\", \"V60 ThinQ\", \"G8X ThinQ\", \"V50 ThinQ\", \"G8 ThinQ\",\n  ],\n  lenovo: [\n      \"Legion Y90\", \"Legion Phone Duel 2\", \"Legion Phone Duel\",\n  ],\n  htc: [\n      \"U24 Pro\", \"U23 Pro\", \"Desire 22 Pro\", \"U12+\", \"U11+\", \"U11\",\n  ],\n  zte: [\n      \"Nubia Z60 Ultra\", \"RedMagic 9 Pro+\", \"Axon 60 Ultra\", \"Nubia Z50S Pro\", \"RedMagic 8S Pro+\", \"Axon 50 Ultra\",\n  ],\n  tcl: [\n      \"TCL 50 5G\", \"TCL 40 NxtPaper\", \"TCL 40R\", \"TCL 30 V 5G\",\n  ],\n  nothing: [\n      \"Phone (2a)\",\n      \"Phone (2)\",\n      \"Phone (1)\",\n  ],\n  tecno: [\n      \"Camon 30 Premier\", \"Camon 30 Pro\", \"Phantom V Fold\", \"Phantom X2 Pro\", \"Pova 6 Pro\",\n  ],\n  meizu: [\n      \"Meizu 21 Pro\", \"Meizu 20 Pro\", \"Meizu 18s Pro\", \"Meizu 17 Pro\",\n  ],\n  other: [\"Generic Model\"],\n};\n\nexport const SENSITIVITY_FIELDS: (keyof SensitivityRecommendationInput['inGameSensitivity'])[] = [\n  \"general\",\n  \"redDot\",\n  \"twoXSight\",\n  \"fourXSight\",\n  \"awm\",\n  \"freeLook\",\n];\n",
            "src/lib/types.ts": "import type { SensitivityRecommendationInput, SensitivityRecommendationOutput } from '@/ai/flows/sensitivity-recommendation';\n\nexport type Profile = {\n  id: string;\n  name: string;\n  description: string;\n  createdAt: string;\n  updatedAt: string;\n  input: SensitivityRecommendationInput;\n  recommendation?: SensitivityRecommendationOutput;\n};\n",
            "src/lib/utils.ts": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
            "src/components/ui/accordion.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
            "src/components/ui/alert-dialog.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n",
            "src/components/ui/alert.tsx": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n",
            "src/components/ui/avatar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
            "src/components/ui/badge.tsx": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
            "src/components/ui/button.tsx": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
            "src/components/ui/calendar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n",
            "src/components/ui/card.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
            "src/components/ui/carousel.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n",
            "src/components/ui/chart.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n",
            "src/components/ui/checkbox.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
            "src/components/ui/collapsible.tsx": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
            "src/components/ui/command.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n",
            "src/components/ui/dialog.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> & { hideCloseButton?: boolean }\n>(({ className, children, hideCloseButton, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      onEscapeKeyDown={(e) => {\n        if (hideCloseButton) e.preventDefault();\n      }}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      {!hideCloseButton && (\n        <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n          <X className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Close</span>\n        </DialogPrimitive.Close>\n      )}\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
            "src/components/ui/dropdown-menu.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
            "src/components/ui/form.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>(\n  {...props}: ControllerProps<TFieldValues, TName>\n) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n",
            "src/components/ui/input.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
            "src/components/ui/label.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
            "src/components/ui/menubar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
            "src/components/ui/popover.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n",
            "src/components/ui/progress.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
            "src/components/ui/radio-group.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
            "src/components/ui/scroll-area.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
            "src/components/ui/select.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
            "src/components/ui/separator.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
            "src/components/ui/sheet.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {\n      hideCloseButton?: boolean\n    }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, hideCloseButton = false, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      {!hideCloseButton && (\n        <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n          <X className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      )}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
            "src/components/ui/sidebar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)))\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n",
            "src/components/ui/skeleton.tsx": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
            "src/components/ui/slider.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const [isFocused, setIsFocused] = React.useState(false);\n  const value = props.value || [];\n  \n  return (\n    <SliderPrimitive.Root\n      ref={ref}\n      className={cn(\n        \"relative flex w-full touch-none select-none items-center\",\n        className\n      )}\n      onFocus={() => setIsFocused(true)}\n      onBlur={() => setIsFocused(false)}\n      {...props}\n    >\n      <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n        <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n      </SliderPrimitive.Track>\n       <SliderPrimitive.Thumb\n        className={cn(\n          \"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\"\n        )}\n      />\n    </SliderPrimitive.Root>\n  )\n})\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
            "src/components/ui/switch.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n",
            "src/components/ui/table.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
            "src/components/ui/tabs.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
            "src/components/ui/textarea.tsx": "import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n",
            "src/components/ui/toast.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
            "src/components/ui/toaster.tsx": "\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n",
            "src/components/ui/tooltip.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
            "tailwind.config.ts": "import type {Config} from 'tailwindcss';\n\nexport default {\n  darkMode: ['class'],\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      fontFamily: {\n        body: ['var(--font-body)'],\n        headline: ['var(--font-headline)'],\n        code: ['monospace'],\n      },\n      colors: {\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        chart: {\n          '1': 'hsl(var(--chart-1))',\n          '2': 'hsl(var(--chart-2))',\n          '3': 'hsl(var(--chart-3))',\n          '4': 'hsl(var(--chart-4))',\n          '5': 'hsl(var(--chart-5))',\n        },\n        sidebar: {\n          DEFAULT: 'hsl(var(--sidebar-background))',\n          foreground: 'hsl(var(--sidebar-foreground))',\n          primary: 'hsl(var(--sidebar-primary))',\n          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n          accent: 'hsl(var(--sidebar-accent))',\n          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n          border: 'hsl(var(--sidebar-border))',\n          ring: 'hsl(var(--sidebar-ring))',\n        },\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: {\n            height: '0',\n          },\n          to: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n        },\n        'accordion-up': {\n          from: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n          to: {\n            height: '0',\n          },\n        },\n        'pulse-ring': {\n          '0%': {\n            boxShadow: '0 0 0 0 hsl(var(--primary) / 0.7)',\n          },\n          '100%': {\n            boxShadow: '0 0 0 1rem hsl(var(--primary) / 0)',\n          },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n        'pulse-ring': 'pulse-ring 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n} satisfies Config;\n",
            "tsconfig.json": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2017\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n"
          }
        }
        ```
        JSON_EOF

    - name: Install dependencies
      run: npm install

    - name: Setup Android project
      run: npm run android:setup

    - name: Build APK
      run: |
        cd android
        ./gradlew assembleDebug

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-debug-apk
        path: android/app/build/outputs/apk/debug/app-debug.apk
